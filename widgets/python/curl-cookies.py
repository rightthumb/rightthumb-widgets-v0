import _rightThumb._construct as __;appDBA=__.clearFocus(__name__,__file__);__.appReg=appDBA;import _rightThumb._base3 as _; # type: ignore
def focus(parentApp='', childApp='', reg=True): global appDBA; f = __.appName(appDBA, parentApp, childApp); return f if reg else f
fieldSet=_.l.vars(focus(),__name__,__file__,appDBA);_.load();_v=__.imp('_rightThumb._vars')

def sw():
    _.switches.register( 'Files', '-f,-fi,-file,-files','file.txt', isData='glob,name,data,clean', description='Files', isRequired=False )
    _.switches.register('Domain', '-d,-domain', 'Cookie domain (required)')
    _.switches.register('Subdomain', '-sd,-subdomain', 'Subdomain flag TRUE|FALSE (default: TRUE)')
    _.switches.register('Path', '-p,-path', 'Cookie path (default: /)')
    _.switches.register('Secure', '-s,-secure', 'Secure flag TRUE|FALSE (default: FALSE)')
    _.switches.register('Expire', '-e,-expire', 'Expire time (e.g., 1h, 6mo) (default: 1h)')
    _.switches.register('Name', '-n,-name', 'Cookie name (required)')
    _.switches.register('Value', '-v,-value', 'Cookie value (required)')
    _.switches.process()
_._default_settings_()

_.appInfo[focus()] = {
    'file': 'thisApp.py',
    'description': 'Changes the world',
    'categories': [
                        'DEFAULT',
                ],
    'examples': [
                        _.hp('p thisApp -file file.txt'),
                        _.linePrint(label='simple',p=0),
                        '',
    ],
    'columns': [
    ],
    'aliases': [],
    'relatedapps': [],
    'prerequisite': [],
    'notes': [],
}

_.appInfo[focus()] = _.appInfoContinuity(__.thisApp( __file__ ),_.appInfo[focus()])
_.appData[focus()] = _.appDataContinuity()
def appRegDics(): return { 'appInfo': _.appInfo[focus()], 'appData': _.appData[focus()] }

def triggers():
    _._default_triggers_()
    _.switches.trigger( 'Files',   _.isFileAdvanced, vs=False )     # Advanced File Registration    (Fn Alias Resolves To: def myFileLocations)
    _.switches.trigger( 'DB', _.aliasesFi )
    _.switches.trigger( 'Folder', _.myFolderLocations )
    _.switches.trigger( 'Folders', _.myFolderLocations )
    __.SwitchesModifier.Trigger['Folders'] = _.myFolder
    _.switches.trigger( 'OutputFolder', _.aliasesFo )
def _local_(do): exec(do)
_.l.conf('clean-pipe',True); _.l.sw.register( triggers, sw )
########################################################################################
#n)--> start

#!/usr/bin/env python3
import sys, time, re, os

_.load()

units = {
    's': 1, 'sec': 1, 'secs': 1, 'second': 1, 'seconds': 1,
    'm': 60, 'min': 60, 'mins': 60, 'minute': 60, 'minutes': 60,
    'h': 3600, 'hr': 3600, 'hrs': 3600, 'hour': 3600, 'hours': 3600,
    'd': 86400, 'day': 86400, 'days': 86400,
    'w': 604800, 'wk': 604800, 'wks': 604800, 'week': 604800, 'weeks': 604800,
    'mo': 2628000, 'month': 2628000, 'months': 2628000,
    'y': 31536000, 'yr': 31536000, 'yrs': 31536000, 'year': 31536000, 'years': 31536000,
}

def parse_expire(offset):
    match = re.match(r'(\d+)\s*([a-zA-Z]+)', offset)
    if not match:
        raise ValueError(f"Invalid time format: {offset}")
    val, unit = match.groups()
    unit = unit.lower()
    if unit not in units:
        raise ValueError(f"Unknown time unit: {unit}")
    return int(time.time()) + int(val) * units[unit]

def generate_cookie_line(domain, subdomain, path, secure, expire, name, value):
    return f"{domain}\t{subdomain}\t{path}\t{secure}\t{expire}\t{name}\t{value}"

def ensure_header(path):
    if not os.path.exists(path):
        with open(path, 'w') as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file was generated by gen_cookies.py\n\n")

def main():
    if _.switches.isActive('Domain'):
        domain = _.switches.value('Domain')
    else:
        _.pr('Missing required: -domain',c='red')
        sys.exit(1)

    if _.switches.isActive('Name'):
        name = _.switches.value('Name')
    else:
        _.pr('Missing required: -name',c='red')
        sys.exit(1)

    if _.switches.isActive('Value'):
        value = _.switches.value('Value')
    else:
        _.pr('Missing required: -value',c='red')
        sys.exit(1)

    if _.switches.isActive('Subdomain'):
        subdomain = _.switches.value('Subdomain')
    else:
        subdomain = 'TRUE'

    if _.switches.isActive('Path'):
        path = _.switches.value('Path')
    else:
        path = '/'

    if _.switches.isActive('Secure'):
        secure = _.switches.value('Secure')
    else:
        secure = 'FALSE'

    if _.switches.isActive('Expire'):
        expire_str = _.switches.value('Expire')
    else:
        expire_str = '1h'

    expires = parse_expire(expire_str)
    line = generate_cookie_line(domain, subdomain, path, secure.upper(), expires, name, value)


    if _.switches.isActive('Files'):
        cookie_file = _.switches.value('Files')
    else:
        cookie_file = 'cookies.txt'
    ensure_header(cookie_file)

    with open(cookie_file, 'a') as f:
        f.write(line + "\n")

    _.pr('Cookie added:',c='yellow')
    _.pr(line=1, c='green')
    _.pr(_.getText(cookie_file,raw=True),c='cyan')
    _.pr(line=1, c='green')

if __name__ == "__main__":
    main()






def action():
    pass

########################################################################################
if __name__ == '__main__':
    action(); _.isExit(__file__)